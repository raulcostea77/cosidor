{"version":3,"sources":["_mixins.scss","styles.scss","_colors.scss"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCE;AAsDF;;;;;;;;;;EAUE;AAiBF;;EAEE;AAmEF;;;;;;;;;EASE;AAWF;;;;;;;;EAQE;AAaF;;;;;;;;;;;;;;;;;;;;;;;;;EAyBE;AAgBF;;;;;;;;;EASE;AAmCF;;;;;;EAME;AAoBF;;;;;;;EAOE;AAiBF;;;;;;;;;;;EAWE;AAeF;;;EAGE;AAmBF;;;;EAIE;AAqCF;;;;;;;;;;;;;;;;;;;;;EAqBE;AAsBF;;EAEE;ACreF;EACC,0BCRsB;CDStB","file":"styles.css","sourcesContent":["/*\r\n\tMedia Query mixin\r\n\tSee https://github.com/sass-mq/sass-mq/ for original full version.\r\n\t@example scss\r\n\t .element {\r\n\t   @include mq($from: mobile) {\r\n\t\t color: red;\r\n\t   }\r\n\t   @include mq($to: tablet) {\r\n\t\t color: blue;\r\n\t   }\r\n\t   @include mq(mobile, tablet) {\r\n\t\t color: green;\r\n\t   }\r\n\t   @include mq($from: tablet, $and: '(orientation: landscape)') {\r\n\t\t color: teal;\r\n\t   }\r\n\t   @include mq(em(950px)) {\r\n\t\t color: hotpink;\r\n\t   }\r\n\t   @include mq(em(950px), $media-feature: height) {\r\n\t\t color: hotpink;\r\n\t   }\r\n\t   @include mq(tablet, $media-type: screen) {\r\n\t\t color: hotpink;\r\n\t   }\r\n\t   // Advanced use:\r\n\t   $custom-breakpoints: (L: 900px, XL: 1200px);\r\n\t   @include mq(L, $bp: $custom-breakpoints) {\r\n\t\t color: hotpink;\r\n\t   }\r\n\t }\r\n*/\r\n\r\n@mixin mq(\r\n\t$from: false,\r\n\t$to: false,\r\n\t$and: false,\r\n\t$media-feature: width,\r\n\t$media-type: all,\r\n\t$bp: $breakpoints\r\n) {\r\n\t$min-width: 0;\r\n\t$max-width: 0;\r\n\t$media-query: '';\r\n\r\n\t// From: this breakpoint (inclusive)\r\n\t@if $from {\r\n\t\t@if type-of($from) == number {\r\n\t\t\t$min-width: $from;\r\n\t\t} @else {\r\n\t\t\t$min-width: map_get($bp, $from);\r\n\t\t}\r\n\t}\r\n\r\n\t// Until: that breakpoint (exclusive)\r\n\t@if $to {\r\n\t\t@if type-of($to) == number {\r\n\t\t\t$max-width: $to;\r\n\t\t} @else {\r\n\t\t\t$negative: if($em-media-queries, 0.01em, 1px);\r\n\t\t\t$max-width: map_get($bp, $to) - $negative;\r\n\t\t}\r\n\t}\r\n\r\n\t@if $media-feature {\r\n\t\t@if $min-width != 0 { $media-query: '#{$media-query} and (min-#{$media-feature}: #{$min-width})'; }\r\n\t\t@if $max-width != 0 { $media-query: '#{$media-query} and (max-#{$media-feature}: #{$max-width})'; }\r\n\t}\r\n\r\n\t@if $and {\r\n\t\t$media-query: '#{$media-query} and #{$and}';\r\n\t}\r\n\r\n\t// Remove unnecessary media query prefix 'all and '\r\n\t@if ($media-type == 'all' and $media-query != '') {\r\n\t\t$media-type: '';\r\n\t\t$media-query: str-slice(unquote($media-query), 6);\r\n\t}\r\n\r\n\t@media #{$media-type + $media-query} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tMargin / Padding Quick Resets\r\n\texample: top & bottom margin set to $spacing-unit\r\n\t.element {\r\n\t\t@include push--ends;\r\n\t}\r\n\texample: left & right padding set to $spacing-unit--small\r\n\t.element {\r\n\t\t@include soft--sides($spacing-unit--small);\r\n\t}\r\n*/\r\n\r\n// add/remove margins\r\n@mixin push--ends($spacing: $spacing-unit) { margin: { top: $spacing; bottom: $spacing; } }\r\n@mixin push--sides($spacing: $spacing-unit) { margin: { left: $spacing; right: $spacing; } }\r\n@mixin push--auto { margin: { left: auto; right: auto; } }\r\n@mixin offset--sides($spacing: $spacing-unit) { margin: { left: -$spacing; right: -$spacing; } }\r\n@mixin flush--ends { margin: { top: 0; bottom: 0; } }\r\n@mixin flush--sides { margin: { left: 0; right: 0; } }\r\n\r\n// add/remove paddings\r\n@mixin soft--ends($spacing: $spacing-unit) { padding: { top: $spacing; bottom: $spacing; } }\r\n@mixin soft--sides($spacing: $spacing-unit) { padding: { left: $spacing; right: $spacing; } }\r\n@mixin hard--ends { padding: { top: 0; bottom: 0; } }\r\n@mixin hard--sides { padding: { left: 0; right: 0; } }\r\n\r\n\r\n/*\r\n\tHelper mixins\r\n*/\r\n\r\n// Contain floats / clearfix\r\n@mixin cf {\r\n\r\n\t&::after {\r\n\t\tcontent: '';\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}\r\n\r\n// Hide from both screenreaders and browsers\r\n@mixin hidden {\r\n\tdisplay: none;\r\n\tvisibility: hidden;\r\n}\r\n\r\n@mixin visible($state: 'block') {\r\n\tdisplay: unquote($state);\r\n\tvisibility: visible;\r\n}\r\n\r\n// Hide only visually, but have it available for screenreaders\r\n@mixin vh($focusable: false) {\r\n\tborder: 0;\r\n\tclip: rect(0 0 0 0);\r\n\theight: 1px;\r\n\tmargin: -1px;\r\n\toverflow: hidden;\r\n\tpadding: 0;\r\n\tposition: absolute;\r\n\twidth: 1px;\r\n\r\n\t@if $focusable {\r\n\t\t@include vh-focusable;\r\n\t}\r\n}\r\n\r\n@mixin vh-reset {\r\n\tclip: auto;\r\n\theight: auto;\r\n\tmargin: 0;\r\n\toverflow: visible;\r\n\tposition: static;\r\n\twidth: auto;\r\n}\r\n\r\n// Allow the element to be focusable when navigated to via the keyboard\r\n@mixin vh-focusable {\r\n\t&:active,\r\n\t&:focus {\r\n\t\tclip: auto;\r\n\t\theight: auto;\r\n\t\tmargin: 0;\r\n\t\toverflow: visible;\r\n\t\tposition: static;\r\n\t\twidth: auto;\r\n\t}\r\n}\r\n\r\n// Hide visually and from screenreaders, but maintain layout\r\n@mixin invisible {\r\n\tvisibility: hidden;\r\n}\r\n\r\n\r\n/*\r\n\tForm input placeholder text\r\n\texample:\r\n\tinput,\r\n\ttextarea {\r\n\t\t@include input-placeholder {\r\n\t\t\tcolor: $grey;\r\n\t\t}\r\n\t}\r\n*/\r\n\r\n@mixin input-placeholder {\r\n\t&.placeholder { @content; }\r\n\t&:-moz-placeholder { @content; }\r\n\t&::-moz-placeholder { @content; }\r\n\t&:-ms-input-placeholder { @content; }\r\n\t&::-webkit-input-placeholder { @content; }\r\n}\r\n\r\n\r\n/*\r\n\tRetina images\r\n\texample:\r\n\t.element {\r\n\t\t@include retina {\r\n\t\t\tbackground-image: url(../img/background@2x.png);\r\n\t\t}\r\n\t}\r\n*/\r\n\r\n@mixin retina {\r\n\t@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\r\n\tonly screen and (-moz-min-device-pixel-ratio: 1.5),\r\n\tonly screen and (-o-min-device-pixel-ratio: 3 / 2),\r\n\tonly screen and (min-device-pixel-ratio: 1.5),\r\n\tonly screen and (min-resolution: 1.5dppx) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tContent margins\r\n\tfore removing first/last child margins\r\n\texample: default\r\n\t.element {\r\n\t\t@include content-margins;\r\n\t}\r\n\toutput:\r\n\t.element > *:first-child {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\t.element > *:last-child {\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n\texample: empty selector\r\n\t.element {\r\n\t\t@include content-margins('false');\r\n\t}\r\n\toutput:\r\n\t.element:first-child {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\t.element:last-child {\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n*/\r\n\r\n@mixin content-margins($selector: '> *', $last-child: false) {\r\n\t@if not $selector {\r\n\t\t$selector: '&';\r\n\t}\r\n\r\n\t#{unquote($selector)} {\r\n\t\t&:first-child { margin-top: 0; }\r\n\t\t@if $last-child {\r\n\t\t\t&:last-child { margin-bottom: 0; }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tCSS Triangle\r\n\tused for creating CSS only triangles\r\n\texample:\r\n\t.element {\r\n\t\t&::before {\r\n\t\t\t@include css-triangle(blue, down);\r\n\t\t}\r\n\t}\r\n*/\r\n\r\n@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){\r\n\t@include pseudo($pos: $position);\r\n\twidth: 0;\r\n\theight: 0;\r\n\r\n\t@if $round {\r\n\t\tborder-radius: 3px;\r\n\t}\r\n\r\n\t@if $direction == down {\r\n\t\tborder-left: $size solid transparent;\r\n\t\tborder-right: $size solid transparent;\r\n\t\tborder-top: $size solid $color;\r\n\t\tmargin-top: 0 - round( $size / 2.5 );\r\n\t} @else if $direction == up {\r\n\t\tborder-left: $size solid transparent;\r\n\t\tborder-right: $size solid transparent;\r\n\t\tborder-bottom: $size solid $color;\r\n\t\tmargin-bottom: 0 - round( $size / 2.5 );\r\n\t} @else if $direction == right {\r\n\t\tborder-top: $size solid transparent;\r\n\t\tborder-bottom: $size solid transparent;\r\n\t\tborder-left: $size solid $color;\r\n\t\tmargin-right: -$size;\r\n\t} @else if  $direction == left {\r\n\t\tborder-top: $size solid transparent;\r\n\t\tborder-bottom: $size solid transparent;\r\n\t\tborder-right: $size solid $color;\r\n\t\tmargin-left: -$size;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tHide text\r\n\texample:\r\n\t.element {\r\n\t\t@include hide-text;\r\n\t}\r\n*/\r\n\r\n@mixin hide-text($break: false, $indent: 200%, $align: left, $overflow: hidden) {\r\n\t@if $break {\r\n\t\tposition: absolute;\r\n\t\ttop: 0; left: 0;\r\n\t\tpointer-events: none;\r\n\t}\r\n\ttext: {\r\n\t\tindent: $indent;\r\n\t\talign: $align;\r\n\t}\r\n\tfont-size: 0;\r\n\twhite-space: nowrap;\r\n\t@if $overflow {\r\n\t\toverflow: $overflow;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tResponsive ratio\r\n\tUsed for creating scalable elements that maintain the same ratio\r\n\texample:\r\n\t.element {\r\n\t\t@include responsive-ratio(400, 300);\r\n\t}\r\n*/\r\n\r\n@mixin responsive-ratio($x,$y, $pseudo: false) {\r\n\t$padding: unquote( ( $y / $x ) * 100 + '%' );\r\n\r\n\t@if $pseudo {\r\n\t\t&::before {\r\n\t\t\t@include pseudo($pos: relative);\r\n\t\t\twidth: 100%;\r\n\t\t\tpadding-top: $padding;\r\n\t\t}\r\n\t} @else {\r\n\t\tpadding-top: $padding;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tTypography\r\n\tText image replacement, with responsive ratio\r\n\tHTML:\r\n\t<h1 class=\"element\">\r\n\t\t<span>Text to replace</span>\r\n\t</h1>\r\n\texample:\r\n\t.element {\r\n\t\t@include typography(200, 50, 'hello-world');\r\n\t}\r\n*/\r\n\r\n@mixin typography($w, $h, $file, $type: png, $overflow: hidden) {\r\n\t@include responsive-ratio($w, $h, true);\r\n\tposition: relative;\r\n\tmax-width: $w * 1px;\r\n\tbackground: url('/assets/img/typography/#{$file}.#{$type}') 50% 50% no-repeat;\r\n\tbackground-size: contain;\r\n\r\n\tspan {\r\n\t\t@include hide-text(true, $overflow: $overflow);\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\tIcon\r\n\tFor using fontastic icons in pseudo elements\r\n*/\r\n\r\n@mixin icon-css($content: false) {\r\n\t@if $content {\r\n\t\tcontent: '#{$content}';\r\n\t}\r\n\tdisplay: block;\r\n\tfont-family: 'icon-font-family' !important;\r\n\tfont-style: normal !important;\r\n\tfont-weight: normal !important;\r\n\tfont-variant: normal !important;\r\n\ttext-transform: none !important;\r\n\tspeak: none;\r\n\tline-height: 1;\r\n\t-webkit-font-smoothing: antialiased;\r\n\t-moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n\r\n/*\r\n\tColours\r\n\tbackground, colour, etc. match up with colour map in _variables.scss\r\n\tmodify to suit per project\r\n*/\r\n\r\n@mixin colours(\r\n\t$selector: false,\r\n\t$chain: '&--',\r\n\t$background: 'base',\r\n\t$border: true\r\n) {\r\n\r\n\t@each $name, $values in $colours {\r\n\t\t#{$chain}#{$name} {\r\n\r\n\t\t\t@if $selector {\r\n\r\n\t\t\t\t#{$selector} {\r\n\t\t\t\t\t@if $background {\r\n\t\t\t\t\t\tbackground-color: map-get($values, $background);\r\n\t\t\t\t\t\t@if $border {\r\n\t\t\t\t\t\t\tborder-color: darken(map-get($values, $background), 20%);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} @else {\r\n\r\n\t\t\t\t@if $background {\r\n\t\t\t\t\tbackground-color: map-get($values, $background);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n/*\r\n\tFluid Property\r\n\thttp://www.adrenalinmedia.com.au/the-agency/insights/this-changes-everything-css-fluid-properties.aspx\r\n\tHTML:\r\n\t<h1 class=\"element\">\r\n\t\t<span>Text to replace</span>\r\n\t</h1>\r\n\texample:\r\n\th1 {\r\n\t\t@include fp(font-size, 50, 100); // 50px at 320, 100px at 1920;\r\n\t}\r\n\toutput:\r\n\th1 {\r\n\t\tfont-size: calc(3.125vw + 40px); //This is the magic!\r\n\t}\r\n\t@media (max-width:320px){ //Clips the start to the min value\r\n\t\tfont-size:50px;\r\n\t}\r\n\t@media (min-width:1920px){ //Clips the end to the max value\r\n\t\tfont-size:100px;\r\n\t}\r\n*/\r\n\r\n@mixin fp($property, $min, $max, $start: 320, $end: breakpoint('desktop'), $clip: true, $clipAtStart: true, $clipAtEnd: true) {\r\n\t$start: $start / ($start * 0 + 1);\r\n\t$end: $end / ($end * 0 + 1);\r\n\t$multiplier: ($max - $min) / ($end - $start) * 100;\r\n\t$adder: ($min * $end - $max * $start) / ($end - $start);\r\n\t$formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});\r\n\t@if $clip and $clipAtStart {\r\n\t\t@media (max-width: #{$start + 0px}) {\r\n\t\t\t#{$property}: $min + 0px;\r\n\t\t}\r\n\t}\r\n\t@if $clip and $clipAtEnd {\r\n\t\t@media (min-width: #{$end + 0px}) {\r\n\t\t\t#{$property}: $max + 0px;\r\n\t\t}\r\n\t}\r\n\t#{$property}: $formula;\r\n}\r\n\r\n\r\n/*\r\n\tMisc\r\n*/\r\n\r\n@mixin align($vertical: true, $horizontal: false, $position: relative) {\r\n\t@if $position {\r\n\t\tposition: $position;\r\n\t}\r\n\t@if $vertical {\r\n\t\ttop: 50%;\r\n\t}\r\n\t@if $horizontal {\r\n\t\tleft: 50%;\r\n\t}\r\n\r\n\t@if $vertical and $horizontal {\r\n\t\ttransform: translateX(-50%) translateY(-50%);\r\n\t} @else if $vertical {\r\n\t\ttransform: translateY(-50%);\r\n\t} @else {\r\n\t\ttransform: translateX(-50%);\r\n\t}\r\n}\r\n\r\n@mixin antialias {\r\n\tfont-smoothing: antialiased;\r\n\t-webkit-font-smoothing: antialiased;\r\n\t-moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n@mixin appearance($val: none) {\r\n\t-webkit-appearance: $val;\r\n\t-moz-appearance: $val;\r\n\tappearance: $val;\r\n}\r\n\r\n@mixin font-size($sizes) {\r\n\t@each $breakpoint, $size in $sizes {\r\n\t\t@if $breakpoint == base {\r\n\t\t\tfont-size: $size;\r\n\t\t} @else {\r\n\t\t\t@include mq($breakpoint) {\r\n\t\t\t\tfont-size: $size;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin hardware($backface: true, $perspective: 1000) {\r\n\r\n\t@if $backface {\r\n\t\tbackface-visibility: hidden;\r\n\t}\r\n\r\n\tperspective: $perspective;\r\n}\r\n\r\n@mixin pos($pos, $t, $r, $b, $l, $z: false, $hardware: true) {\r\n\t@if $pos == fixed and $hardware { @include hardware; }\r\n\t@if $pos { position: $pos; }\r\n\t@if $t { top: $t; }\r\n\t@if $r { right: $r; }\r\n\t@if $b { bottom: $b; }\r\n\t@if $l { left: $l; }\r\n\t@if $z { z-index: $z; }\r\n}\r\n\r\n@mixin pseudo($display: block, $pos: absolute, $content: ''){\r\n\tcontent: $content;\r\n\tdisplay: $display;\r\n\tposition: $pos;\r\n}\r\n\r\n@mixin selection {\r\n\t::-moz-selection { @content; }\r\n\t::selection { @content; }\r\n}\r\n\r\n@mixin truncate($truncation-boundary) {\r\n\tmax-width: $truncation-boundary;\r\n\twhite-space: nowrap;\r\n\toverflow: hidden;\r\n\ttext-overflow: ellipsis;\r\n}\r\n\r\n@mixin unlist($margin: true, $padding: true) {\r\n\t@if $margin {\r\n\t\t@if $margin == 'vertical' {\r\n\t\t\t@include flush--ends;\r\n\t\t} @elseif $margin == 'horizontal' {\r\n\t\t\t@include flush--sides;\r\n\t\t} @else {\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t}\r\n\t@if $padding {\r\n\t\tpadding: 0;\r\n\t}\r\n\tlist-style: none;\r\n}\r\n\r\n\r\n@mixin unselectable {\r\n\t-webkit-touch-callout: none;\r\n\tuser-select: none;\r\n}","@import 'mixins';\r\n@import 'colors';\r\n\r\nhtml {\r\n  \r\n}\r\n\r\n#footer{\r\n\tbackground-color: $cosidor-blue;\r\n}","$cosidor-blue : #010066;\r\n$cosidor-red : #970707;"]}